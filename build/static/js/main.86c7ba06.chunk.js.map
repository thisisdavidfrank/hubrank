{"version":3,"sources":["view/Grid.js","utils/ServiceHelper.js","view/Main.js","App.js","serviceWorker.js","index.js"],"names":["Grid","state","reposRankType","reposArray","reposColumns","columns","Header","props","className","width","accessor","Cell","key","original","id","value","href","Math","round","rankingColumns","forks","style","color","stargazers_count","watchers_count","setRankingColumnDefinition","col","rankType","sortable","this","nextProps","reposRankTypeColumn","reposOtherTypesColumn","push","setState","concat","slice","height","background","length","data","pageSize","showPageSizeOptions","showPagination","noDataText","React","Component","ServiceHelper","getOrganizationRepos","organizationName","callbackFunction","getRepos","url","fetch","method","headers","Headers","then","resp","json","jsonResp","link","get","nextIndex","indexOf","substring","Main","reposOrganization","sortRepos","reposData","sort","a","b","Number","rank","forEach","repo","processResponse","response","setRankType","selectedRankType","setOrganization","selectedOrganization","onChange","event","currentTarget","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86c7ba06.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\n\r\nclass Grid extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.setRankingColumnDefinition();\r\n    }\r\n\r\n    state = {\r\n        reposRankType: '',\r\n        reposArray: [],\r\n        reposColumns: [],\r\n    }\r\n\r\n    columns = [\r\n                {\r\n                    Header: props => (<div className='header-cell rank-item'>Popularity Rank</div>),\r\n                    width: 90,\r\n                    accessor: 'rank',\r\n                    Cell: props => (\r\n                                    <div key={props.original.id + '_rank'}>\r\n                                        <div className=\"info-cell rank-item\">\r\n                                            {props.value}\r\n                                        </div>\r\n                                    </div>\r\n                                    )\r\n                }, {\r\n                    Header: props => (<div className='header-cell'>Repo Name</div>),\r\n                    accessor: 'name',\r\n                    width: 200,\r\n                    Cell: props => (\r\n                                    <div key={props.original.id + '_name'}>\r\n                                        <div className=\"info-cell\">\r\n                                            <a href={props.value}>{props.value}</a>\r\n                                        </div>\r\n                                    </div>\r\n                                    )\r\n                }, {\r\n                    Header: props => (<div className='header-cell'>Description</div>),\r\n                    accessor: 'description',\r\n                    width: 300,\r\n                    Cell: props => (\r\n                                    <div key={props.original.id + '_desc'}>\r\n                                        <div className=\"info-cell\">\r\n                                            <span>{props.value}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    )\r\n                }, {\r\n                    Header: props => (<div className='header-cell'>Repo Size</div>),\r\n                    width: 100,\r\n                    accessor: 'size',\r\n                    Cell: props => (\r\n                                    <div key={props.original.id + '_size'}>\r\n                                        <div className=\"info-cell\">\r\n                                            <span>{Math.round(props.value / 1024) + ' MB'}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                }\r\n            ];\r\n\r\n    rankingColumns = {\r\n        forks: {\r\n                Header: props => (<div className='header-cell'\r\n                                       style={this.state.reposRankType === 'forks'\r\n                                              ? {color: '#CE6900'}\r\n                                              : {}}\r\n                                       >\r\n                                        Forks\r\n                                  </div>),\r\n                accessor: 'forks',\r\n        },\r\n        stargazers_count: {\r\n                Header: props => (<div className='header-cell'\r\n                                       style={this.state.reposRankType === 'stargazers_count'\r\n                                              ? {color: '#CE6900'}\r\n                                              : {}}\r\n                                       >\r\n                                        Stargazers\r\n                                  </div>),\r\n                accessor: 'stargazers_count',\r\n        },\r\n        watchers_count: {\r\n                Header: props => (<div className='header-cell'\r\n                                       style={this.state.reposRankType === 'watchers_count'\r\n                                              ? {color: '#CE6900'}\r\n                                              : {}}\r\n                                       >\r\n                                        Watchers\r\n                                  </div>),\r\n                accessor: 'watchers_count',\r\n        }\r\n    }\r\n\r\n    setRankingColumnDefinition() {\r\n        for (var rankType in this.rankingColumns) {\r\n            let col = this.rankingColumns[rankType];\r\n            col.width = 90;\r\n            col.sortable = false;\r\n            col.Cell = ((props) => (\r\n                                    <div key={props.original.id + '_' + col.accessor}>\r\n                                        <div className=\"info-cell\"\r\n                                             style={this.state.reposRankType === col.accessor\r\n                                                    ? {color: '#CE6900'}\r\n                                                    : {}}\r\n                                            >\r\n                                            {props.value}\r\n                                        </div>\r\n                                    </div>\r\n                                  )\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let reposRankType = nextProps.reposRankType;\r\n        let reposRankTypeColumn = this.rankingColumns[reposRankType];\r\n        let reposOtherTypesColumn = [];\r\n        for (var rankType in this.rankingColumns) {\r\n            if (rankType !== reposRankType) {\r\n                reposOtherTypesColumn.push(\r\n                    this.rankingColumns[rankType]\r\n                );\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            reposColumns: [].concat(this.columns.slice(0,1),\r\n                               reposRankTypeColumn,\r\n                               this.columns.slice(1),\r\n                               reposOtherTypesColumn)\r\n        });\r\n\r\n        this.setState({\r\n            reposArray: nextProps.reposArray,\r\n            reposRankType: nextProps.reposRankType\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return <ReactTable\r\n                        style={{width: '100%', height: 'calc(100vh - 80px)', background: this.state.reposArray.length > 0 ? '#FFFFFF' : '#282c34'}}\r\n                        data={this.state.reposArray}\r\n                        columns={this.state.reposColumns}\r\n                        pageSize={this.state.reposArray.length}\r\n                        showPageSizeOptions={false}\r\n                        showPagination={false}\r\n                        noDataText='Getting the entire repositories list...'\r\n                />;\r\n    }\r\n}\r\n\r\nexport default Grid;","class ServiceHelper {\r\n\r\n    static getOrganizationRepos = function(organizationName, callbackFunction) {\r\n        let url = 'https://api.github.com/orgs/'\r\n                + organizationName\r\n                + '/repos'\r\n                + '?per_page=100';\r\n        \r\n        ServiceHelper.getRepos(url, [], callbackFunction);\r\n    }\r\n\r\n    static getRepos = function(url, data, callbackFunction) {\r\n        fetch(url,\r\n             {\r\n                method: 'get',\r\n                headers: new Headers({\r\n                    'Accept': 'application/vnd.github.inertia-preview+json'\r\n                }), \r\n             })\r\n             .then((resp) => {\r\n                 resp.json()\r\n                     .then((jsonResp) => {\r\n                         data = data.concat(jsonResp);\r\n                         /*\r\n                            GitHub's API returns data with pagination.\r\n                            Thus, when there are several pages of data,\r\n                            we need to get the repos from all of them\r\n                            in order to be able to apply a proper sort.\r\n                            Thus, we are checking for the 'Link' header,\r\n                            extracting the url for the \"next\" page from\r\n                            the 'Link' header value, and then recursively\r\n                            calling the API until there are no more pages.\r\n                         */\r\n                         let link = resp.headers.get('Link');\r\n                         if (link) {\r\n                             let nextIndex = link.indexOf('>; rel=\"next\"');\r\n                             if (nextIndex > -1) {\r\n                                 let url = link.substring(0, nextIndex).substring(1);\r\n                                 ServiceHelper.getRepos(url, data, callbackFunction);\r\n                             } else {\r\n                                 callbackFunction(data);\r\n                             }\r\n                         } else {\r\n                            callbackFunction(data);\r\n                         }\r\n                     });\r\n                 \r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport default ServiceHelper;","import React from 'react';\r\nimport Grid from './Grid';\r\nimport ServiceHelper from '../utils/ServiceHelper';\r\n\r\nclass Main extends React.Component {\r\n    \r\n    state = {\r\n        reposRankType: 'forks',\r\n        reposOrganization: 'netflix',\r\n        reposArray: []\r\n    }\r\n\r\n    sortRepos = (reposData) => {\r\n        let rankType = this.state.reposRankType;\r\n        reposData.sort((a,b) => {\r\n            return (Number(a[rankType]) < Number(b[rankType])\r\n                    ? 1\r\n                    : (Number(a[rankType]) === Number(b[rankType])\r\n                       ? 0\r\n                       : -1));\r\n        });\r\n        \r\n        let rank = 1;\r\n        reposData.forEach((repo) => {\r\n            repo.rank = rank++;\r\n        });\r\n\r\n        this.setState({\r\n            reposArray: reposData\r\n        });\r\n    }\r\n\r\n    processResponse = (response) => {\r\n        this.sortRepos(response);\r\n    }\r\n\r\n    setRankType = (selectedRankType) => {\r\n        this.setState({\r\n            reposRankType: selectedRankType\r\n        }, () => {\r\n            this.sortRepos(this.state.reposArray);\r\n        });\r\n    }\r\n\r\n    setOrganization = (selectedOrganization) => {\r\n        this.setState({\r\n            reposOrganization: selectedOrganization\r\n        }, () => {\r\n            this.setState({\r\n                reposArray: []\r\n            }, () => {\r\n                this.getRepos();\r\n            });\r\n        });\r\n    }\r\n\r\n    getRepos = () => {\r\n        ServiceHelper.getOrganizationRepos(this.state.reposOrganization, this.processResponse);\r\n    }\r\n\r\n    componentWillMount() {\r\n       this.getRepos();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <>\r\n                    <div className=\"title\">HubRank</div>\r\n                    <div className=\"ranking-info\">\r\n                        <span>Github popularity ranking by:</span>\r\n                        <select onChange={(event) => this.setRankType(event.currentTarget.value)}>\r\n                            <option value=\"forks\">Forks</option>\r\n                            <option value=\"stargazers_count\">Stargazers</option>\r\n                            <option value=\"watchers_count\">Watchers</option>\r\n                        </select>\r\n                        <span>of all repositories under:</span>\r\n                        <select onChange={(event) => this.setOrganization(event.currentTarget.value)}>\r\n                            <option value=\"netflix\">Netflix</option>\r\n                            <option value=\"tensorflow\">TensorFlow</option>\r\n                            <option value=\"ethereum\">Ethereum</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"grid-container\">\r\n                        <Grid\r\n                            reposArray={this.state.reposArray}\r\n                            reposRankType={this.state.reposRankType}\r\n                        />\r\n                    </div>\r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './view/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}